from calculations.calc_generally import (
    header_height,
    header_width,
    header_x,
    header_y,
    logout_button_height,
    logout_button_width,
    logout_button_x,
    logout_button_y,
    set_max_font_size_button_confirm,
    set_max_font_size_button_logout,
    set_max_font_size_label,
)
from calculations.calc_input_widgets import (
    confirm_button_height,
    confirm_button_width,
    confirm_button_x,
    confirm_button_y,
    error_message_height,
    error_message_width,
    error_message_x,
    error_message_y,
    keyboard_grid_height,
    keyboard_grid_width,
    keyboard_grid_x,
    keyboard_grid_y,
    line_edit1_height,
    line_edit1_width,
    line_edit1_x,
    line_edit1_y,
    line_edit2_height,
    line_edit2_width,
    line_edit2_x,
    line_edit2_y,
    set_max_font_size_buttons_keyboard,
    set_max_font_size_line_edit,
)
from PyQt5 import QtCore, QtGui, QtWidgets
from ui.main_window import UiMainWindow

font = QtGui.QFont()
main_window = UiMainWindow()


class UiQuantitySelection(QtWidgets.QWidget):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # define widget
        self.setObjectName("quantity_selection")
        # define confirm button
        self.pushButton_confirm = QtWidgets.QPushButton(parent=self)
        self.pushButton_confirm.setGeometry(
            QtCore.QRect(
                confirm_button_x, confirm_button_y, confirm_button_width, confirm_button_height
            )
        )
        self.pushButton_confirm.setText("Bestätigen")
        font.setFamily("Arial")
        font.setPointSize(set_max_font_size_button_confirm(self.pushButton_confirm))
        font.setBold(True)
        self.pushButton_confirm.setFont(font)
        self.pushButton_confirm.setStyleSheet("")
        self.pushButton_confirm.setCheckable(False)
        self.pushButton_confirm.setAutoDefault(False)
        self.pushButton_confirm.setDefault(False)
        self.pushButton_confirm.setObjectName("pushButton_confirm")
        # define header
        self.label_text1 = QtWidgets.QLabel(parent=self)
        self.label_text1.setGeometry(QtCore.QRect(header_x, header_y, header_width, header_height))
        self.label_text1.setText("Stückzahl-Auswahl")
        font.setFamily("Arial")
        font.setPointSize(set_max_font_size_label(self.label_text1))
        font.setBold(True)
        font.setKerning(True)
        self.label_text1.setFont(font)
        self.label_text1.setStyleSheet("")
        self.label_text1.setScaledContents(False)
        self.label_text1.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_text1.setObjectName("label_text1")
        # create line for user input
        self.lineEdit1_userInput = QtWidgets.QLineEdit(parent=self)
        self.lineEdit1_userInput.setGeometry(
            QtCore.QRect(line_edit1_x, line_edit1_y, line_edit1_width, line_edit1_height)
        )
        self.lineEdit1_userInput.setPlaceholderText("von")
        pointsize = set_max_font_size_line_edit(self.lineEdit1_userInput)
        font.setPointSize(pointsize)
        font.setBold(False)
        self.lineEdit1_userInput.setFont(font)
        self.lineEdit1_userInput.setText("")
        self.lineEdit1_userInput.setObjectName("lineEdit1_userInput")
        self.lineEdit1_userInput.returnPressed.connect(
            lambda: self.pushButton_confirm.click()
        )  # switch lineedit when enter is pressed
        self.lineEdit1_userInput.installEventFilter(self)

        self.lineEdit2_userInput = QtWidgets.QLineEdit(parent=self)
        self.lineEdit2_userInput.setGeometry(
            QtCore.QRect(line_edit2_x, line_edit2_y, line_edit2_width, line_edit2_height)
        )
        self.lineEdit2_userInput.setPlaceholderText("bis")
        font.setPointSize(pointsize)
        font.setBold(False)
        self.lineEdit2_userInput.setFont(font)
        self.lineEdit2_userInput.setText("")
        self.lineEdit2_userInput.setObjectName("lineEdit2_userInput")
        self.lineEdit2_userInput.returnPressed.connect(
            lambda: self.pushButton_confirm.click()
        )  # press confirm when enter is pressed
        self.lineEdit2_userInput.installEventFilter(self)

        # define error message
        self.label_text2 = QtWidgets.QLabel(parent=self)
        self.label_text2.setGeometry(
            QtCore.QRect(
                error_message_x, error_message_y, error_message_width, error_message_height
            )
        )
        self.label_text2.setText("Bitte geben Sie eine gültige Stückzahl zwischen 1 und 9999 ein!")
        font.setFamily("Arial")
        font.setPointSize(set_max_font_size_label(self.label_text2))
        font.setBold(True)
        font.setKerning(True)
        self.label_text2.setFont(font)
        self.label_text2.setStyleSheet("color: red;")
        self.label_text2.setScaledContents(False)
        self.label_text2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.label_text2.setObjectName("label_text2")
        self.label_text2.hide()
        # define logout button
        self.pushButton_logout = QtWidgets.QPushButton(parent=self)
        self.pushButton_logout.setText("Ausloggen")
        self.pushButton_logout.setGeometry(
            QtCore.QRect(
                logout_button_x, logout_button_y, logout_button_width, logout_button_height
            )
        )
        font.setPointSize(set_max_font_size_button_logout(self.pushButton_logout))
        font.setBold(False)
        self.pushButton_logout.setFont(font)
        self.pushButton_logout.setObjectName("pushButton_logout")
        # create keyboard grid
        self.gridWidget = QtWidgets.QWidget(parent=self)
        self.gridWidget.setGeometry(
            QtCore.QRect(
                keyboard_grid_x, keyboard_grid_y, keyboard_grid_width, keyboard_grid_height
            )
        )
        self.gridWidget.setFont(font)
        self.gridWidget.setObjectName("gridWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        # create backspace
        self.pushButton_backspace = QtWidgets.QPushButton(parent=self.gridWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding
        )
        self.pushButton_backspace.setText("←")
        font.setPointSize(set_max_font_size_buttons_keyboard(self.pushButton_backspace))
        self.pushButton_backspace.setFont(font)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_backspace.sizePolicy().hasHeightForWidth())
        self.pushButton_backspace.setSizePolicy(sizePolicy)
        self.pushButton_backspace.setObjectName("pushButton_backspace")
        self.gridLayout.addWidget(self.pushButton_backspace, 3, 2, 1, 1)

        # create delete
        self.pushButton_delete = QtWidgets.QPushButton(parent=self.gridWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding
        )
        self.pushButton_delete.setText("del")
        font.setPointSize(set_max_font_size_buttons_keyboard(self.pushButton_delete))
        self.pushButton_delete.setFont(font)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButton_delete.sizePolicy().hasHeightForWidth())
        self.pushButton_delete.setSizePolicy(sizePolicy)
        self.pushButton_delete.setObjectName("pushButton_delete")
        self.gridLayout.addWidget(self.pushButton_delete, 3, 0, 1, 1)

        # create keyboard buttons
        self.add_keyboard_buttons()
        # connect keyboard-buttons to functions
        self.pushButton_backspace.clicked.connect(lambda: self.delete_last_letter())
        self.pushButton_delete.clicked.connect(lambda: self.delete_all_letters())

        QtCore.QMetaObject.connectSlotsByName(self)

    def eventFilter(self, obj, event):  # noqa: N802
        if event.type() == QtCore.QEvent.Type.FocusIn:
            if obj == self.lineEdit1_userInput:
                self.active_lineedit = self.lineEdit1_userInput
            elif obj == self.lineEdit2_userInput:
                self.active_lineedit = self.lineEdit2_userInput
        return super().eventFilter(obj, event)

    # add_letter function for keyboard in which userinput is focused
    def add_letter(self, letter):
        if self.active_lineedit == self.lineEdit1_userInput:
            self.lineEdit1_userInput.setText(self.lineEdit1_userInput.text() + letter)
        elif self.active_lineedit == self.lineEdit2_userInput:
            self.lineEdit2_userInput.setText(self.lineEdit2_userInput.text() + letter)

    # delete_last_letter function for backspace button
    def delete_last_letter(self):
        if self.active_lineedit == self.lineEdit1_userInput:
            self.lineEdit1_userInput.setText(self.lineEdit1_userInput.text()[:-1])
        elif self.active_lineedit == self.lineEdit2_userInput:
            self.lineEdit2_userInput.setText(self.lineEdit2_userInput.text()[:-1])

    # delete_all_letters function for delete button
    def delete_all_letters(self):
        if self.active_lineedit == self.lineEdit1_userInput:
            self.lineEdit1_userInput.setText("")
        elif self.active_lineedit == self.lineEdit2_userInput:
            self.lineEdit2_userInput.setText("")

    # add_keyboard_buttons function for keyboard
    def add_keyboard_buttons(self):
        buttons = [
            ("1", 0, 0, 1, 1),
            ("2", 0, 1, 1, 1),
            ("3", 0, 2, 1, 1),
            ("4", 1, 0, 1, 1),
            ("5", 1, 1, 1, 1),
            ("6", 1, 2, 1, 1),
            ("7", 2, 0, 1, 1),
            ("8", 2, 1, 1, 1),
            ("9", 2, 2, 1, 1),
            ("0", 3, 1, 1, 1),
        ]

        for button in buttons:
            self.add_keyboard_button(*button)

    # add_keyboard_button function for keyboard
    def add_keyboard_button(self, character, row, column, row_span, column_span):
        keyboard_button = QtWidgets.QPushButton(parent=self.gridWidget)
        sizePolicy = QtWidgets.QSizePolicy(
            QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Expanding
        )
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(keyboard_button.sizePolicy().hasHeightForWidth())
        keyboard_button.setSizePolicy(sizePolicy)
        keyboard_button.setObjectName(f"pushButton_{character}")
        self.gridLayout.addWidget(keyboard_button, row, column, row_span, column_span)

        keyboard_button.setText(character)
        font.setPointSize(set_max_font_size_buttons_keyboard(keyboard_button))
        keyboard_button.setFont(font)

        keyboard_button.clicked.connect(lambda: self.add_letter(character))
