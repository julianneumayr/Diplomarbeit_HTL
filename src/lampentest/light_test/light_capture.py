from light_test.converter import approximation_rgb_to_kelvin, candelatolumen
import serial
import serial.tools.list_ports
from settings import ABSTRAHLWINKEL, LED_ANALYSER_SERIAL_NUMBER


def light_capture():
    def find_port_by_serial(serial_number):
        ports = list(serial.tools.list_ports.comports())
        for port in ports:
            if serial_number in port.serial_number:
                return port.device

        return None

    found_port = find_port_by_serial(LED_ANALYSER_SERIAL_NUMBER)

    if found_port is None:
        return -1, -1
        
    else:

        lichtstrom_list = []
        kelvin_list = []

        def parse_rgbi_response(fiber, response):
            # Split the response into individual values
            values = response.strip().split()

            # Extract red, green, blue, and intensity values
            red = int(values[0])
            green = int(values[1])
            blue = int(values[2])
            intensity = int(values[3])
            lichtstrom = candelatolumen(ABSTRAHLWINKEL, intensity)
            lichtstrom_list.append(lichtstrom)
            kelvin = approximation_rgb_to_kelvin(red, green, blue)
            kelvin_list.append(kelvin)

        with serial.Serial(found_port, 57600, timeout=10) as ser:   # open serial port
            ser.write(b'capture\r\n')
            ans = ser.readline().decode('utf-8')
            if ans != "OK\r\n":
                print("Error: Could not capture light")
                return -2, -2
            for fiber in range(1,10):
                ser.write(b'GETRGBI0'+str(fiber).encode('utf-8')+b'\r\n')
                rgbi = ser.readline().decode('utf-8')
                parse_rgbi_response(fiber, rgbi)
            avg_lichtstrom = int(sum(lichtstrom_list)/len(lichtstrom_list))
            avg_lichttemperatur = int(sum(kelvin_list)/len(kelvin_list))
            ser.close()
        return avg_lichtstrom, avg_lichttemperatur