from converter import CandelaToLumen, RGBToKelvin
import serial
import serial.tools.list_ports


class Capture:
    def light_capture(self):
        def find_port_by_serial(serial_number):
            ports = list(serial.tools.list_ports.comports())
            for port in ports:
                if serial_number in port.serial_number:
                    return port.device

            return None

        serial_number = "A5048DLI"     # LED ANALYSER
        found_port = find_port_by_serial(serial_number)

        if found_port is None:
            print('Port not found')
            
        else:

            lichtstrom_list = []
            kelvin_list = []

            def parse_rgbi_response(fiber, response):
                # Split the response into individual values
                values = response.strip().split()

                # Extract red, green, blue, and intensity values
                abstrahlwinkel = 110    # Abstrahlwinkel der LEDON Lampen in Grad
                red = int(values[0])
                green = int(values[1])
                blue = int(values[2])
                intensity = int(values[3])
                lichtstrom = CandelaToLumen().calculation(abstrahlwinkel, intensity)
                lichtstrom_list.append(lichtstrom)
                kelvin = RGBToKelvin().calculation(red, green, blue)
                kelvin_list.append(kelvin)

            with serial.Serial(found_port, 57600, timeout=10) as ser:   # open serial port
                ser.write(b'capture\r\n')
                for fiber in range(1,10):
                    ser.write(b'GETRGBI0'+str(fiber).encode('utf-8')+b'\r\n')
                    rgbi = ser.readline().decode('utf-8')
                    parse_rgbi_response(fiber, rgbi)
                avg_lichtstrom = int(sum(lichtstrom_list)/len(lichtstrom_list))
                avg_lichttemperatur = int(sum(kelvin_list)/len(kelvin_list))
                ser.close()
            return avg_lichtstrom, avg_lichttemperatur

if __name__ == "__main__":
    print(Capture().light_capture())
