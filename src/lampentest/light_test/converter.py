import math

           
def approximation_rgb_to_kelvin(red_value, green_value, blue_value):
    def rgb_to_kelvin(red, green, blue):
        # Convert RGB to XYZ
        r = red / 255.0
        g = green / 255.0
        b = blue / 255.0

        r = _pivot_rgb_to_xyz(r)
        g = _pivot_rgb_to_xyz(g)
        b = _pivot_rgb_to_xyz(b)

        x = r * 0.4124564 + g * 0.3575761 + b * 0.1804375
        y = r * 0.2126729 + g * 0.7151522 + b * 0.0721750
        z = r * 0.0193339 + g * 0.1191920 + b * 0.9503041

        # Convert XYZ to xyY
        sum_xyz = x + y + z
        if sum_xyz == 0:
            x = 0
            y = 0
        else:
            x /= sum_xyz
            y /= sum_xyz

        # Convert xyY to correlated color temperature (CCT) in Kelvin
        n = (x - 0.3320) / (0.1858 - y)
        cct = 449.0 * n ** 3 + 3525.0 * n ** 2 + 6823.3 * n + 5520.33

        return cct


    def _pivot_rgb_to_xyz(value):
        if value <= 0.04045:
            return value / 12.92
        else:
            return ((value + 0.055) / 1.055) ** 2.4
    
    
    temperature_kelvin = rgb_to_kelvin(red_value, green_value, blue_value)
    return int(temperature_kelvin)
        

def candelatolumen(abstrahlwinkel, intensity):
    raumwinkel = 2 * math.pi * (1 - math.cos(math.radians(abstrahlwinkel/2)))
    lichtstrom = intensity * raumwinkel
    return lichtstrom
