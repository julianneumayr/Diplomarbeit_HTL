import sys
from PyQt5.QtCore import Qt, QThread, QTimer, pyqtSignal
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLabel, QPushButton, QProgressBar, QSizePolicy

class WorkerThread(QThread):
    update_signal = pyqtSignal(int)

    def __init__(self, task_duration, progress_step):
        super().__init__()
        self.task_duration = task_duration
        self.progress_step = progress_step

    def run(self):
        total_steps = self.task_duration // self.progress_step
        for step in range(1, total_steps + 1):
            self.update_signal.emit((step / total_steps) * 100)
            self.msleep(self.progress_step)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()

        self.central_widget = QWidget(self)
        self.setCentralWidget(self.central_widget)

        self.layout = QVBoxLayout(self.central_widget)

        self.label = QLabel("Waiting...", self)
        self.layout.addWidget(self.label)

        self.progress_bar = QProgressBar(self)
        self.progress_bar.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)
        self.layout.addWidget(self.progress_bar)

        self.button = QPushButton("Start", self)
        self.button.clicked.connect(self.start_task)
        self.layout.addWidget(self.button)

        self.worker_thread = None

    def start_task(self):
        self.button.setEnabled(False)
        self.worker_thread = WorkerThread(task_duration=5000, progress_step=10)
        self.worker_thread.update_signal.connect(self.update_task)
        self.worker_thread.start()

    def update_task(self, progress_percentage):
        self.progress_bar.setValue(progress_percentage)

        if progress_percentage == 100:
            self.label.setText("Task completed!")
            self.button.setEnabled(True)

def main():
    app = QApplication(sys.argv)
    window = MainWindow()
    window.setGeometry(100, 100, 400, 200)
    window.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
