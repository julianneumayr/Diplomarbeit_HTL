import json
import os
import sys
import time

from calculations.calc_user_login import set_max_font_size_label_filepath
from settings import ENV, LIGHT_SETTINGS_CONFIG_PATH, INVERT_GPIO

# TODO: remove this once everything is in gpio.py
if ENV == 'PROD':
    import RPi.GPIO as GPIO
else:
    from GPIOEmulator.EmulatorGUI import GPIO

import gpio
from light_test.light_capture import Capture

#from label_print.label import Label
from log.protocol import Protocol
from PyQt5.QtCore import QCoreApplication, QSettings
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication
from ui.article_selection import UiArticleSelection
from ui.business_order_selection import UiBusinessOrderSelection
from ui.close_cover import UiCloseCover
from ui.main_window import UiMainWindow
from ui.open_cover import UiOpenCover
from ui.pruefung import UiPruefung
from ui.quantity_selection import UiQuantitySelection
from ui.tool_change import UiToolChange
from ui.user_login import UiUserLogin

settings = QSettings("Bilton", "Lampentest")


class CurrentConfig:
    
    def __init__(self) -> None:
        with open(LIGHT_SETTINGS_CONFIG_PATH) as lightSettingsFile:
            self.light_settings = json.load(lightSettingsFile)
        self.active_article_number = ""
        self.active_article_data = {}
        self.current_user = ""
        self.test_counter = 1
        self.test_quantity = 0
        self.business_order = ""

config = CurrentConfig()

# TODO: remove me
def invert(pin_value):
    # Invert for GPIO emulator
    if INVERT_GPIO:
        return not pin_value
    else:
        return pin_value

close_to_exit = False
loop_flag = True

def main():
    # Clean start
    # settings.clear()

    capture = Capture()  # create capture object for capturing light
    protocol = Protocol()  # create protocol object for saving data
    #label = Label()  # create label object for printing labels

    #global filepath_light_settings, number, quantity, close_to_exit, loop_flag
    #filepath_light_settings = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'lampeneigenschaften.json')  # noqa: PTH120, PTH118
    #number = 1
    #quantity = 9999


    gpio.init()
    
    def light_turned_off():
        #if first value of tuple light_caputre is < 1000 return true
        #get intensity from file at article number
        threshold_intensity = 0.1*(int(config.active_article_data["Lichtstrom"]))
        light_capture_result = capture.light_capture()
        return light_capture_result is not None and light_capture_result[0] < threshold_intensity
        
    def capture_light_values():
        #global intensity, temperature
        light_capture_result = capture.light_capture()
        supposed_intensity_min = int(int(config.active_article_data["Lichtstrom"])-0.1*int(config.active_article_data["Lichtstrom"]))
        supposed_intensity_max = int(int(config.active_article_data["Lichtstrom"])+0.1*int(config.active_article_data["Lichtstrom"]))
        supposed_temperature_min = int(int(config.active_article_data["Lichttemperatur"])-0.1*int(config.active_article_data["Lichttemperatur"]))
        supposed_temperature_max = int(int(config.active_article_data["Lichttemperatur"])+0.1*int(config.active_article_data["Lichttemperatur"]))
        if light_capture_result is not None and supposed_intensity_min < light_capture_result[0] < supposed_intensity_max and supposed_temperature_min < light_capture_result[1] < supposed_temperature_max:
            intensity = light_capture_result[0]
            temperature = light_capture_result[1]
        else:
            print("Fehler bei der Lichtmessung")
            intensity = 0
            temperature = 0
        return intensity, temperature


    def activate_voltage():
        if config.active_article_data["DC"] == "Nein" and config.active_article_data["Notstrom"] == "Nein":
            GPIO.output(24, GPIO.LOW)   # AC
            GPIO.output(25, GPIO.HIGH)  # Hauptstrom an
            GPIO.output(26, GPIO.LOW)	# Notstrom aus
        else:
            print(f"Fehler bei der Hauptstrom-Konfiguration der Lampe {config.active_article_data['Name']}")
            gpio.deactivate_voltage()
            #GPIO.output(24, GPIO.LOW)   # AC
            #GPIO.output(25, GPIO.LOW)   # Hauptstrom aus
            #GPIO.output(26, GPIO.LOW)   # Notstrom aus

    def activate_emergency_voltage():
        if config.active_article_data["DC"] == "Ja" and config.active_article_data["Notstrom"] == "Ja":
            GPIO.output(24, GPIO.HIGH)  # Umschaltung auf DC
            GPIO.output(25, GPIO.LOW)   # kein Hauptstrom
            GPIO.output(26, GPIO.HIGH)  # Notstrom an
        elif config.active_article_data["DC"] == "Nein" and config.active_article_data["Notstrom"] == "Ja":
            GPIO.output(24, GPIO.LOW)   # AC
            GPIO.output(25, GPIO.LOW)   # Hauptstrom aus
            GPIO.output(26, GPIO.HIGH)  # Notstrom aus (????????)
        else:
            print(f"Fehler bei der Notstrom-Konfiguration der Lampe {config.active_article_data['Name']}")
            gpio.deactivate_voltage()
            #GPIO.output(24, GPIO.LOW)   # AC
            #GPIO.output(25, GPIO.LOW)   # Hauptstrom aus
            #GPIO.output(26, GPIO.LOW)   # Notstrom aus
    
    app = QApplication(sys.argv)  # create app

    # create main window
    main_window = UiMainWindow()
    # create page open_cover
    open_cover = UiOpenCover()
    main_window.addWidget(open_cover)
    # create page user_login
    user_login = UiUserLogin()
    main_window.addWidget(user_login)
    # create page business_order_selection
    business_order_selection = UiBusinessOrderSelection()
    main_window.addWidget(business_order_selection)
    # create page article_selection
    article_selection = UiArticleSelection()
    main_window.addWidget(article_selection)
    # create page tool_change
    tool_change = UiToolChange()
    main_window.addWidget(tool_change)
    # create page quantity_selection
    quantity_selection = UiQuantitySelection()
    main_window.addWidget(quantity_selection)
    # create page close_cover
    close_cover = UiCloseCover()
    main_window.addWidget(close_cover)
    # create page pruefung
    pruefung = UiPruefung()
    main_window.addWidget(pruefung)

    # function for open cover
    def start_open_cover():
        global loop_flag
        gpio.start_open_cover()
        pause_end = time.time()
        opening_time = 5
        time_stored = 0
        time_passed = 0
        while time_passed <= opening_time and loop_flag is True:
            time_passed = time.time() + time_stored - pause_end
            gpio.open_cover_1() # TODO: rename me
            if open_cover.pushButton_confirm.isChecked():
                time_stored = time_passed
                while open_cover.pushButton_confirm.isChecked() and loop_flag is True:
                    gpio.open_cover_2()
                    QCoreApplication.processEvents()
                pause_end = time.time()

            QCoreApplication.processEvents()

        open_cover.pushButton_confirm.setChecked(False)
        loop_flag = True
        
        gpio.open_cover_2()

        if config.test_counter == 1:
            main_window.setCurrentWidget(user_login)
            user_login.lineEdit_userInput.setFocus()
        elif config.test_counter == config.test_quantity+1: # TODO: simply use >=?
            main_window.setCurrentWidget(business_order_selection)
        else:
            main_window.setCurrentWidget(close_cover)

    # function for cancel button on page open_cover
    def cancel_open_cover():
        global loop_flag
        loop_flag = False

    # function for confirm button on page user_login
    def confirm_user_login():
        #global user_id
        user_id = user_login.lineEdit_userInput.text()
        user_id = user_id.upper()
        user_login.lineEdit_userInput.clear()
        # TODO: userid should only consist of characters
        if not user_id.isalnum() or len(user_id) != 4:
            user_login.label_text2.show()
            user_login.lineEdit_userInput.setFocus()
            return
        user_login.label_text2.hide()
        config.current_user = user_id

        main_window.setCurrentWidget(business_order_selection)
        business_order_selection.lineEdit_userInput.setFocus()

    def confirm_business_order_selection():
        business_order = business_order_selection.lineEdit_userInput.text()
        business_order_selection.lineEdit_userInput.clear()
        # check if business order is 10 digit integer
        if not business_order.isnumeric() or len(business_order) != 10:
            business_order_selection.label_text2.show()
            business_order_selection.lineEdit_userInput.setFocus()
            return
        business_order_selection.label_text2.hide()

        config.business_order = business_order
        main_window.setCurrentWidget(article_selection)
        article_selection.lineEdit_userInput.setFocus()

    def confirm_article_selection():
        # article number should contain 9 characters (8 numbers and _ on index 6)
        article_number = article_selection.lineEdit_userInput.text()
        article_selection.lineEdit_userInput.clear()
        if len(article_number) != 9 or article_number[6] != "_" or not article_number[:6].isnumeric() or not article_number[7:].isnumeric():
            article_selection.label_text2.show()
            article_selection.lineEdit_userInput.setFocus()
            return
        article_selection.label_text2.hide()

        config.active_article_number = article_number

        if article_number not in config.light_settings:
            article_selection.label_text2.show()
            article_selection.lineEdit_userInput.setFocus()
            return
        article_selection.label_text2.hide()
        new_tool = config.light_settings[article_number]["Tool"]
        config.active_article_data = config.light_settings[article_number]

        # if tool is not equal to current tool show popup
        old_tool = settings.value("current_tool")
        if old_tool != new_tool:
            tool_change.label_text2.setText(f"von {old_tool} zu {new_tool}")
            main_window.setCurrentWidget(tool_change)

        else:
            main_window.setCurrentWidget(quantity_selection)
            quantity_selection.lineEdit_userInput.setFocus()

    
    def confirm_tool_change():
        # save new tool in settings and save tool change in protocol
        new_tool = tool_change.label_text2.text().split(" ")[-1]
        protocol.save_tool_change(config.current_user, settings.value("current_tool"), new_tool)
        main_window.setCurrentWidget(quantity_selection)
        quantity_selection.lineEdit_userInput.setFocus()

    def confirm_quantity_selection():
        # quantity should be an integer between 1 and 9999
        quantity = quantity_selection.lineEdit_userInput.text()
        quantity_selection.lineEdit_userInput.clear()
        if not quantity.isnumeric() or int(quantity) < 1 or int(quantity) > 9999:
            quantity_selection.label_text2.show()
            quantity_selection.lineEdit_userInput.setFocus()
            return
        
        config.test_quantity = int(quantity)
        
        quantity_selection.label_text2.hide()        
        main_window.setCurrentWidget(close_cover)
    
    def start_close_cover():
        if close_cover.pushButton_confirm.isChecked():
            GPIO.output(10, invert(GPIO.HIGH))   # Zuhaltung schließen

            while GPIO.input(17) == GPIO.LOW and close_cover.pushButton_confirm.isChecked():

                GPIO.output(3, invert(GPIO.HIGH))
                GPIO.output(2, invert(GPIO.LOW))

                QCoreApplication.processEvents()  # Allow GUI to process events

            if close_cover.pushButton_confirm.isChecked():  # Check the button state again
                time.sleep(1)
                if GPIO.input(16) == GPIO.HIGH:
                    print("Fehler Sicherheitskreis")

            close_cover.pushButton_confirm.setChecked(False)
            GPIO.output(2, invert(GPIO.HIGH))   
            if GPIO.input(16) == GPIO.LOW: # and GPIO.input(17) == GPIO.HIGH:
                GPIO.output(11, invert(GPIO.HIGH))
                GPIO.output(9, invert(GPIO.LOW))
                GPIO.output(8, invert(GPIO.HIGH))    # Licht aus
                
                pruefung.label_text2.setText(f"Prüfung {config.test_counter} von {config.test_quantity}")
                
                if close_to_exit is True:
                    app.quit()

                else:
                    main_window.setCurrentWidget(pruefung)
                    start_check()

                QCoreApplication.processEvents()
        
    def check_motion_sensor():
        # TODO: motion sensore ergebnis als return value
        temperature = intensity = 0
        motion_sensor = "Not o.k."
        activate_voltage()
        time.sleep(1)
        if not light_turned_off():
            print("Licht vor Bewegung aktiviert")
            gpio.deactivate_voltage()
            return
        gpio.turn_motion_sensor_servo()
        time.sleep(1)
        if light_turned_off():
            print("Licht nach Bewegung nicht aktiviert")
            gpio.deactivate_voltage()
            return
        for _i in range(3):
            intensity, temperature = capture_light_values()
            if intensity > 0 and temperature > 0:
                break
        if intensity == 0 or temperature == 0:
            print("Fehler bei der Lichtmessung")
            gpio.deactivate_voltage()
            return
        #open bewegungsmelder.json and get ausschaltzeit
        ausschaltzeit = config.active_article_data["Ausschaltzeit_Bewegungsmelder"]
        time.sleep(ausschaltzeit-2)
        if light_turned_off():
            print("Licht zu früh deaktiviert")
            gpio.deactivate_voltage()
            return
        time.sleep(2)
        if not light_turned_off():
            print("Licht nach Ausschaltzeit nicht deaktiviert")
            gpio.deactivate_voltage()
            return
        gpio.turn_motion_sensor_servo()
        time.sleep(1)
        if light_turned_off():
            print("Licht nach Bewegung nicht aktiviert")
            gpio.deactivate_voltage()
            return
        gpio.activate_daylight()
        time.sleep(1)
        if not light_turned_off():
            print("Licht nach Tageslichtaktivierung nicht deaktiviert")
            gpio.deactivate_daylight()
            gpio.deactivate_voltage()
            return
        gpio.deactivate_daylight()
        time.sleep(1)
        gpio.turn_motion_sensor_servo()
        time.sleep(1)
        gpio.deactivate_voltage()
        if not light_turned_off():
            print("Licht nach Entfernen der Spannung nicht deaktiviert!")
            return
        motion_sensor = "o.k."
        print("Bewegungsmelder-Prüfung erfolgreich")

    def check_light():
        # TODO: ergebnisse als return wert
        intensity = temperature = 0
        motion_sensor = "No motion sensor built in."
        activate_voltage()
        time.sleep(1)
        if light_turned_off():
            print("Licht nicht aktiviert")
            gpio.deactivate_voltage()
            return
        for _i in range(3):
            intensity, temperature = capture_light_values()
            if intensity > 0 and temperature > 0:
                break
        if intensity == 0 or temperature == 0:
            print("Fehler bei der Lichtmessung")
            gpio.deactivate_voltage()
            return
        gpio.deactivate_voltage()
        time.sleep(1)
        if not light_turned_off():
            print("Licht nach Entfernen der Spannung nicht deaktiviert!")
            return
        print("Licht-Prüfung erfolgreich")
        
    def start_check():
        # check if "Bewegungsmelder" at article number is "Ja"
        if config.active_article_data["Bewegungsmelder"] == "Ja":
            pruefung.label_text1.setText("Bewegungsmelder-Prüfung...")
            pruefung.progressBar.setProperty("value", 10)
            check_motion_sensor()
        elif config.active_article_data["Bewegungsmelder"] == "Nein":
            pruefung.label_text1.setText("Licht-Prüfung...")
            pruefung.progressBar.setProperty("value", 10)
            check_light()
        else:
            print(f"Fehler bei der Bewegungsmelder-Konfiguration der Lampe {config.active_article_data['Name']}")
                
    def confirm_pruefung():
        #global number
        protocol.save_test_data(config.current_user, config.business_order, config.active_article_number, config.test_counter, quantity, intensity, temperature, motion_sensor)
        #label.create_label(business_order, article_number, number, quantity, user_id)
        while config.test_counter <= int(config.test_quantity):
            config.test_counter += 1
            pruefung.label_text2.setText(f"Prüfung {config.test_counter} von {config.test_quantity}")
            main_window.setCurrentWidget(open_cover)
            QCoreApplication.processEvents()
            start_open_cover()
            start_close_cover()
            return

        main_window.setCurrentWidget(business_order_selection)

    # function for logout buttons
    def logout():
        main_window.setCurrentWidget(user_login)
        user_login.lineEdit_userInput.setFocus()

    # function for app exit
    def exit_app():
        global close_to_exit
        close_to_exit = True
        gpio.cleanup()
        main_window.setCurrentWidget(close_cover)
        
    # button signals
    open_cover.pushButton_cancel.clicked.connect(cancel_open_cover)
    user_login.pushButton_confirm.clicked.connect(confirm_user_login)
    user_login.pushButton_exit.clicked.connect(exit_app)
    business_order_selection.pushButton_confirm.clicked.connect(confirm_business_order_selection)
    business_order_selection.pushButton_logout.clicked.connect(logout)
    article_selection.pushButton_confirm.clicked.connect(confirm_article_selection)
    article_selection.pushButton_logout.clicked.connect(logout)
    tool_change.pushButton_confirm.clicked.connect(confirm_tool_change)
    quantity_selection.pushButton_logout.clicked.connect(logout)
    quantity_selection.pushButton_confirm.clicked.connect(confirm_quantity_selection)
    close_cover.pushButton_confirm.toggled.connect(start_close_cover)
    pruefung.pushButton_confirm.clicked.connect(confirm_pruefung)

    # load settings
    value = settings.value("filepath")
    if value is not None:
        user_login.label_filepath.setText(str(value))
        font = QFont()
        font.setPointSize(set_max_font_size_label_filepath(user_login.label_filepath))
        user_login.label_filepath.setFont(font)
    else:
        user_login.choose_filepath()

    # show main window
    #initial_gpio_setup()
    main_window.show()
    start_open_cover()
    
    # execute app
    app.exec()

if __name__ == "__main__":
    main()
