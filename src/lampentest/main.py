import sys
import os
import json
import threading
from log.protocol import Protocol
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QSettings, QCoreApplication
from PyQt5.QtGui import QFont
from ui.main_window import UiMainWindow
from ui.article_selection import UiArticleSelection
from ui.tool_change import UiToolChange
from ui.quantity_selection import UiQuantitySelection
from ui.user_login import UiUserLogin
from ui.business_order_selection import UiBusinessOrderSelection
from ui.close_cover import UiCloseCover
from ui.pruefung import UiPruefung
from calculations.calc_user_login import set_max_font_size_label_filepath
from label_print.label import Label
from GPIOEmulator.EmulatorGUI import GPIO
import time

settings = QSettings("Bilton", "Lampentest")

def main():
    protocol = Protocol()  # create protocol object for saving data
    label = Label()  # create label object for printing labels

    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Sicherheitsschaltgerät 0=sicher
    GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Zuhaltung 0=offen
    GPIO.setup(2, GPIO.OUT)     #auffahren
    GPIO.setup(3, GPIO.OUT)     #abfahren
    GPIO.setup(5, GPIO.OUT)     #rot
    GPIO.setup(11, GPIO.OUT)    #gelb
    GPIO.setup(9, GPIO.OUT)     #grün
    GPIO.setup(7, GPIO.OUT)     #gesch. extern
    GPIO.setup(10, GPIO.OUT)    #Zuhaltung
    GPIO.setup(8, GPIO.OUT)     #Licht
    """GPIO.setup(12, GPIO.OUT)    #Servo

    servo = GPIO.PWM(12,50)
    servo.start(97.5)"""

    """def winkel(winkel):
        servo.ChangeDutyCycle(((winkel-0)/(180-0))*(97.5-89)+89)

    def motion_simulation():
        winkel(90)
        time.sleep(1)
        winkel(0)"""
    
    def invert(pin_value):
        return not pin_value
    
    app = QApplication(sys.argv)  # create app

    # create main window
    main_window = UiMainWindow()
    # create page user_login
    user_login = UiUserLogin()
    main_window.addWidget(user_login)
    # create page business_order_selection
    business_order_selection = UiBusinessOrderSelection()
    main_window.addWidget(business_order_selection)
    # create page article_selection
    article_selection = UiArticleSelection()
    main_window.addWidget(article_selection)
    # create page tool_change
    tool_change = UiToolChange()
    main_window.addWidget(tool_change)
    # create page quantity_selection
    quantity_selection = UiQuantitySelection()
    main_window.addWidget(quantity_selection)
    # create page close_cover
    close_cover = UiCloseCover()
    main_window.addWidget(close_cover)

    # function for confirm button on page user_login
    def confirm_user_login():
        global user_id
        user_id = user_login.lineEdit_userInput.text()
        user_id = user_id.upper()
        if not user_id.isalnum() or len(user_id) != 4:
            user_login.label_text2.show()
            user_login.lineEdit_userInput.clear()
            user_login.lineEdit_userInput.setFocus()
            return
        user_login.label_text2.hide()

        main_window.setCurrentWidget(business_order_selection)
        business_order_selection.lineEdit_userInput.setFocus()

    def confirm_business_order_selection():
        global business_order
        business_order = business_order_selection.lineEdit_userInput.text()
        # check if business order is 10 digit integer
        if not business_order.isnumeric() or len(business_order) != 10:
            business_order_selection.label_text2.show()
            business_order_selection.lineEdit_userInput.clear()
            business_order_selection.lineEdit_userInput.setFocus()
            return
        business_order_selection.label_text2.hide()

        main_window.setCurrentWidget(article_selection)
        article_selection.lineEdit_userInput.setFocus()


    def confirm_article_selection():
        # article number should contain 9 digits (8 numbers and 1 _ on index 6)
        global article_number
        article_number = article_selection.lineEdit_userInput.text()
        if len(article_number) != 9 or article_number[6] != "_" or not article_number[:6].isnumeric() or not article_number[7:].isnumeric():
            article_selection.label_text2.show()
            article_selection.lineEdit_userInput.clear()
            article_selection.lineEdit_userInput.setFocus()
            return
        article_selection.label_text2.hide()

        # from json file get the tool name for the article number
        #with open(os.path.join(os.path.join(os.getcwd(), "settings"), "lampeneigenschaften.json"), "r") as file:
        with open(f"{os.getcwd()}/config/lampeneigenschaften.json", "r") as file:
            data = json.load(file)
            # check if article number is in json file
            if article_number not in data:
                article_selection.label_text2.show()
                article_selection.lineEdit_userInput.clear()
                article_selection.lineEdit_userInput.setFocus()
                return
            article_selection.label_text2.hide()
            new_tool = data[article_number]["tool"]

        # if tool is not equal to current tool show popup
        old_tool = settings.value("current_tool")
        if old_tool != new_tool:
            tool_change.label_text2.setText(f"von {old_tool} zu {new_tool}")
            main_window.setCurrentWidget(tool_change)

        else:
            main_window.setCurrentWidget(quantity_selection)
            quantity_selection.lineEdit_userInput.setFocus()

    
    def confirm_tool_change():
        # save new tool in settings and save tool change in protocol
        new_tool = tool_change.label_text2.text().split(" ")[-1]
        protocol.save_tool_change(user_id, settings.value("current_tool"), new_tool)
        main_window.setCurrentWidget(quantity_selection)
        quantity_selection.lineEdit_userInput.setFocus()

    def confirm_quantity_selection():
        # quantity should be an integer between 1 and 9999
        global quantity
        quantity = quantity_selection.lineEdit_userInput.text()
        if not quantity.isnumeric() or int(quantity) < 1 or int(quantity) > 9999:
            quantity_selection.label_text2.show()
            quantity_selection.lineEdit_userInput.clear()
            quantity_selection.lineEdit_userInput.setFocus()
            return
        
        quantity_selection.label_text2.hide()        
        main_window.setCurrentWidget(close_cover)
    
    def start_close_cover():
        if close_cover.pushButton_confirm.isChecked():
            GPIO.output(10, (GPIO.HIGH))   # Zuhaltung schließen
            GPIO.output(9, invert(GPIO.HIGH))   # grün aus
            start_time = time.time()

            while GPIO.input(17) == GPIO.LOW: # or GPIO.input(17) == invert(GPIO.HIGH):
                if not close_cover.pushButton_confirm.isChecked():
                    GPIO.output(10, invert(GPIO.HIGH))
                    break  # Exit both loops if the button is unchecked

                GPIO.output(11, invert(GPIO.LOW))
                GPIO.output(2, invert(GPIO.HIGH))
                GPIO.output(3, invert(GPIO.LOW))

                QCoreApplication.processEvents()  # Allow GUI to process events

            if close_cover.pushButton_confirm.isChecked():  # Check the button state again
                time.sleep(1)
                if GPIO.input(16) == GPIO.HIGH:
                    print("Fehler Sicherheitskreis")

            GPIO.output(3, invert(GPIO.HIGH))   
            GPIO.output(11, invert(GPIO.HIGH))
            GPIO.output(9, invert(GPIO.LOW))
            close_cover.pushButton_confirm.setChecked(False)

    """def confirm_pruefung():
        global number
        protocol.save_test_data(user_id, business_order, article_number, number, quantity)
        label.create_label(business_order, article_number, number, quantity, user_id)
        while number < int(quantity):
            number += 1
            pruefung.label_text2.setText(f"Prüfung {number} von {quantity}")
            return

        exit_app()"""

    # function for logout buttons
    def logout():
        main_window.setCurrentWidget(user_login)
        user_login.lineEdit_userInput.clear()
        user_login.lineEdit_userInput.setFocus()
        article_selection.lineEdit_userInput.clear()
        quantity_selection.lineEdit_userInput.clear()

    # function for app exit
    def exit_app():
        app.quit()
        
    # button signals
    user_login.pushButton_confirm.clicked.connect(confirm_user_login)
    user_login.pushButton_exit.clicked.connect(exit_app)
    business_order_selection.pushButton_confirm.clicked.connect(confirm_business_order_selection)
    business_order_selection.pushButton_logout.clicked.connect(logout)
    article_selection.pushButton_confirm.clicked.connect(confirm_article_selection)
    article_selection.pushButton_logout.clicked.connect(logout)
    tool_change.pushButton_confirm.clicked.connect(confirm_tool_change)
    quantity_selection.pushButton_logout.clicked.connect(logout)
    quantity_selection.pushButton_confirm.clicked.connect(confirm_quantity_selection)
    close_cover.pushButton_confirm.toggled.connect(start_close_cover)
    #pruefung.pushButton_confirm.clicked.connect(confirm_pruefung)

    # load settings
    value = settings.value("filepath")
    if value is not None:
        user_login.label_filepath.setText(str(value))
        font = QFont()
        font.setPointSize(set_max_font_size_label_filepath(user_login.label_filepath))
        user_login.label_filepath.setFont(font)
    else:
        user_login.choose_filepath()

    # show main window
    user_login.lineEdit_userInput.setFocus()    # set focus on line edit
    main_window.show()
    
    # execute app
    app.exec()

if __name__ == "__main__":
    main()
