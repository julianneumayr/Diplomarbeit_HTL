import json
import os
import sys
import time

from calculations.calc_user_login import set_max_font_size_label_filepath
from GPIOEmulator.EmulatorGUI import GPIO
from light_test.light_capture import Capture

#from label_print.label import Label
from log.protocol import Protocol
from PyQt5.QtCore import QCoreApplication, QSettings
from PyQt5.QtGui import QFont
from PyQt5.QtWidgets import QApplication
from ui.article_selection import UiArticleSelection
from ui.business_order_selection import UiBusinessOrderSelection
from ui.close_cover import UiCloseCover
from ui.main_window import UiMainWindow
from ui.open_cover import UiOpenCover
from ui.pruefung import UiPruefung
from ui.quantity_selection import UiQuantitySelection
from ui.tool_change import UiToolChange
from ui.user_login import UiUserLogin

settings = QSettings("Bilton", "Lampentest")

def main():
    capture = Capture()  # create capture object for capturing light
    protocol = Protocol()  # create protocol object for saving data
    #label = Label()  # create label object for printing labels

    global filepath_light_settings, filepath_motion_sensor_settings, number, quantity, close_to_exit, loop_flag
    filepath_light_settings = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'lampeneigenschaften.json')  # noqa: PTH120, PTH118
    filepath_motion_sensor_settings = os.path.join(os.path.dirname(__file__), '..', '..', 'config', 'bewegungsmelder.json')  # noqa: PTH120, PTH118
    number = 1
    quantity = 9999
    close_to_exit = False
    loop_flag = True

    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Sicherheitsschaltgerät 0=sicher
    GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Zuhaltung 0=offen
    #pull down logic
    GPIO.setup(2, GPIO.OUT)     #abfahren
    GPIO.setup(3, GPIO.OUT)     #auffahren
    GPIO.setup(5, GPIO.OUT)     #rot
    GPIO.setup(7, GPIO.OUT)     #gesch. extern
    GPIO.setup(8, GPIO.OUT)     #Licht
    GPIO.setup(9, GPIO.OUT)     #grün
    GPIO.setup(10, GPIO.OUT)    #Zuhaltung
    GPIO.setup(11, GPIO.OUT)    #gelb
    #GPIO.setup(12, GPIO.OUT)    #Servo
    #pull up logic
    GPIO.setup(6, GPIO.OUT)     #DALI
    GPIO.setup(24, GPIO.OUT)    #Notstromquelle
    GPIO.setup(25, GPIO.OUT)    #Hauptstrom an
    GPIO.setup(26, GPIO.OUT)    #Notstrom an
    """

    servo = GPIO.PWM(12,50)
    servo.start(97.5)"""

    def servo_winkel(winkel):
        servo.ChangeDutyCycle(((winkel-0)/(180-0))*(97.5-89)+89)

    def turn_servo():
        servo_winkel(90)
        time.sleep(1)
        servo_winkel(0)
    
    def light_turned_off():
        #if first value of tuple light_caputre is < 1000 return true
        light_capture_result = capture.light_capture()
        return bool(light_capture_result is not None and light_capture_result[0] < 1000)
        
    def capture_light_values():
        global intensity, temperature
        light_capture_result = capture.light_capture()
        if light_capture_result is not None and 3500 < light_capture_result[0] < 4500 and 3500 < light_capture_result[1] < 4500:
            intensity = light_capture_result[0]
            temperature = light_capture_result[1]
        else:
            print("Fehler bei der Lichtmessung")
            intensity = 0
            temperature = 0

    def invert(pin_value):
        return not pin_value
    
    def initial_gpio_setup():
        GPIO.output(2, invert(GPIO.HIGH))
        GPIO.output(3, invert(GPIO.HIGH))
        GPIO.output(5, invert(GPIO.HIGH))
        GPIO.output(7, invert(GPIO.HIGH))
        GPIO.output(8, invert(GPIO.HIGH))
        GPIO.output(9, invert(GPIO.HIGH))
        GPIO.output(10, invert(GPIO.HIGH))
        GPIO.output(11, invert(GPIO.HIGH))
        GPIO.output(24, GPIO.LOW)
        GPIO.output(25, GPIO.LOW)
        GPIO.output(26, GPIO.LOW)
        GPIO.output(6, GPIO.LOW)
        #servo auf 0°

    def activate_daylight():
        GPIO.output(8, invert(GPIO.LOW))

    def deactivate_daylight():
        GPIO.output(8, invert(GPIO.HIGH))

    def activate_voltage():
        with open(filepath_light_settings) as file:  # noqa: PTH123
            data = json.load(file)
            if data[article_number]["DC"] == "Ja" and data[article_number]["Notstrom"] == "Ja":
                GPIO.output(24, GPIO.HIGH)  # Umschaltung auf DC
                GPIO.output(25, GPIO.LOW)   # kein Hauptstrom
                GPIO.output(26, GPIO.HIGH)  # Notstrom an
            elif data[article_number]["DC"] == "Nein" and data[article_number]["Notstrom"] == "Ja":
                GPIO.output(24, GPIO.LOW)   # AC
                GPIO.output(25, GPIO.LOW)   # Hauptstrom aus
                GPIO.output(26, GPIO.HIGH)  # Notstrom aus
            elif data[article_number]["DC"] == "Nein" and data[article_number]["Notstrom"] == "Nein":
                GPIO.output(24, GPIO.LOW)   # AC
                GPIO.output(25, GPIO.HIGH)  # Hauptstrom an
                GPIO.output(26, GPIO.LOW)	# Notstrom aus
            else:
                print(f"Fehler bei der Hauptstrom/Notstrom-Konfiguration der Lampe {data[article_number]['Name']}")
                GPIO.output(24, GPIO.LOW)   # AC
                GPIO.output(25, GPIO.LOW)   # Hauptstrom aus
                GPIO.output(26, GPIO.LOW)   # Notstrom aus

    def deactivate_voltage():
        GPIO.output(24, GPIO.LOW)
        GPIO.output(25, GPIO.LOW)
        GPIO.output(26, GPIO.LOW)
    
    app = QApplication(sys.argv)  # create app

    # create main window
    main_window = UiMainWindow()
    # create page open_cover
    open_cover = UiOpenCover()
    main_window.addWidget(open_cover)
    # create page user_login
    user_login = UiUserLogin()
    main_window.addWidget(user_login)
    # create page business_order_selection
    business_order_selection = UiBusinessOrderSelection()
    main_window.addWidget(business_order_selection)
    # create page article_selection
    article_selection = UiArticleSelection()
    main_window.addWidget(article_selection)
    # create page tool_change
    tool_change = UiToolChange()
    main_window.addWidget(tool_change)
    # create page quantity_selection
    quantity_selection = UiQuantitySelection()
    main_window.addWidget(quantity_selection)
    # create page close_cover
    close_cover = UiCloseCover()
    main_window.addWidget(close_cover)
    # create page pruefung
    pruefung = UiPruefung()
    main_window.addWidget(pruefung)

    # function for open cover
    def start_open_cover():
        global number, loop_flag
        GPIO.output(10, invert(GPIO.LOW))   # Zuhaltung öffnen
        GPIO.output(8, invert(GPIO.LOW))    # Licht an
        GPIO.output(11, invert(GPIO.LOW))   # orange an
        GPIO.output(9, invert(GPIO.HIGH))   # grün aus
        GPIO.output(5, invert(GPIO.HIGH))   # rot aus
        pause_end = time.time()
        opening_time = 5
        time_stored = 0
        time_passed = 0
        while time_passed <= opening_time and loop_flag is True:
            time_passed = time.time() + time_stored - pause_end
            GPIO.output(3, invert(GPIO.LOW))
            GPIO.output(2, invert(GPIO.HIGH))
            if open_cover.pushButton_confirm.isChecked():
                time_stored = time_passed
                while open_cover.pushButton_confirm.isChecked() and loop_flag is True:
                    GPIO.output(2, invert(GPIO.HIGH))
                    GPIO.output(3, invert(GPIO.HIGH))
                    QCoreApplication.processEvents()
                pause_end = time.time()

            QCoreApplication.processEvents()

        open_cover.pushButton_confirm.setChecked(False)
        loop_flag = True
        
        GPIO.output(2, invert(GPIO.HIGH))
        GPIO.output(3, invert(GPIO.HIGH))

        if number == 1:
            main_window.setCurrentWidget(user_login)
            user_login.lineEdit_userInput.setFocus()
        elif number == (int(quantity)+1):
            main_window.setCurrentWidget(business_order_selection)
        else:
            main_window.setCurrentWidget(close_cover)

    # function for cancel button on page open_cover
    def cancel_open_cover():
        global loop_flag
        loop_flag = False

    # function for confirm button on page user_login
    def confirm_user_login():
        global user_id
        user_id = user_login.lineEdit_userInput.text()
        user_id = user_id.upper()
        user_login.lineEdit_userInput.clear()
        if not user_id.isalnum() or len(user_id) != 4:
            user_login.label_text2.show()
            user_login.lineEdit_userInput.setFocus()
            return
        user_login.label_text2.hide()

        main_window.setCurrentWidget(business_order_selection)
        business_order_selection.lineEdit_userInput.setFocus()

    def confirm_business_order_selection():
        global business_order
        business_order = business_order_selection.lineEdit_userInput.text()
        business_order_selection.lineEdit_userInput.clear()
        # check if business order is 10 digit integer
        if not business_order.isnumeric() or len(business_order) != 10:
            business_order_selection.label_text2.show()
            business_order_selection.lineEdit_userInput.setFocus()
            return
        business_order_selection.label_text2.hide()

        main_window.setCurrentWidget(article_selection)
        article_selection.lineEdit_userInput.setFocus()

    def confirm_article_selection():
        # article number should contain 9 digits (8 numbers and 1 _ on index 6)
        global article_number
        article_number = article_selection.lineEdit_userInput.text()
        article_selection.lineEdit_userInput.clear()
        if len(article_number) != 9 or article_number[6] != "_" or not article_number[:6].isnumeric() or not article_number[7:].isnumeric():
            article_selection.label_text2.show()
            article_selection.lineEdit_userInput.setFocus()
            return
        article_selection.label_text2.hide()

        # from json file get the tool name for the article number
        with open(filepath_light_settings) as file:  # noqa: PTH123
            data = json.load(file)
            # check if article number is in json file
            if article_number not in data:
                article_selection.label_text2.show()
                article_selection.lineEdit_userInput.setFocus()
                return
            article_selection.label_text2.hide()
            new_tool = data[article_number]["Tool"]

        # if tool is not equal to current tool show popup
        old_tool = settings.value("current_tool")
        if old_tool != new_tool:
            tool_change.label_text2.setText(f"von {old_tool} zu {new_tool}")
            main_window.setCurrentWidget(tool_change)

        else:
            main_window.setCurrentWidget(quantity_selection)
            quantity_selection.lineEdit_userInput.setFocus()

    
    def confirm_tool_change():
        # save new tool in settings and save tool change in protocol
        new_tool = tool_change.label_text2.text().split(" ")[-1]
        protocol.save_tool_change(user_id, settings.value("current_tool"), new_tool)
        main_window.setCurrentWidget(quantity_selection)
        quantity_selection.lineEdit_userInput.setFocus()

    def confirm_quantity_selection():
        # quantity should be an integer between 1 and 9999
        global quantity
        quantity = quantity_selection.lineEdit_userInput.text()
        quantity_selection.lineEdit_userInput.clear()
        if not quantity.isnumeric() or int(quantity) < 1 or int(quantity) > 9999:
            quantity_selection.label_text2.show()
            quantity_selection.lineEdit_userInput.setFocus()
            return
        
        quantity_selection.label_text2.hide()        
        main_window.setCurrentWidget(close_cover)
    
    def start_close_cover():
        if close_cover.pushButton_confirm.isChecked():
            GPIO.output(10, invert(GPIO.HIGH))   # Zuhaltung schließen

            while GPIO.input(17) == GPIO.LOW and close_cover.pushButton_confirm.isChecked():

                GPIO.output(3, invert(GPIO.HIGH))
                GPIO.output(2, invert(GPIO.LOW))

                QCoreApplication.processEvents()  # Allow GUI to process events

            if close_cover.pushButton_confirm.isChecked():  # Check the button state again
                time.sleep(1)
                if GPIO.input(16) == GPIO.HIGH:
                    print("Fehler Sicherheitskreis")

            close_cover.pushButton_confirm.setChecked(False)
            GPIO.output(2, invert(GPIO.HIGH))   
            if GPIO.input(16) == GPIO.LOW: # and GPIO.input(17) == GPIO.HIGH:
                GPIO.output(11, invert(GPIO.HIGH))
                GPIO.output(9, invert(GPIO.LOW))
                GPIO.output(8, invert(GPIO.HIGH))    # Licht aus
                
                pruefung.label_text2.setText(f"Prüfung {number} von {quantity}")
                
                if close_to_exit is True:
                    app.quit()

                else:
                    main_window.setCurrentWidget(pruefung)
                    start_check()

                QCoreApplication.processEvents()
        
    def check_motion_sensor():
        global motion_sensor
        motion_sensor = "Not o.k."
        activate_voltage()
        if not light_turned_off():
            print("Licht vor Bewegung aktiviert")
            deactivate_voltage()
            return
        turn_servo()
        if light_turned_off():
            print("Licht nach Bewegung nicht aktiviert")
            deactivate_voltage()
            return
        for _i in range(3):
            capture_light_values()
            if intensity > 0 and temperature > 0:
                break
        if intensity == 0 or temperature == 0:
            print("Fehler bei der Lichtmessung")
            deactivate_voltage()
            return
        #open bewegungsmelder.json and get ausschaltzeit
        with open(filepath_motion_sensor_settings) as file:  # noqa: PTH123
            data = json.load(file)
            ausschaltzeit = data[article_number]["Ausschaltzeit"]
            time.sleep(ausschaltzeit-2)
            if light_turned_off():
                print("Licht zu früh deaktiviert")
                deactivate_voltage()
                return
            time.sleep(4)
            if not light_turned_off():
                print("Licht nach Ausschaltzeit nicht deaktiviert")
                deactivate_voltage()
                return
        turn_servo()
        if light_turned_off():
            print("Licht nach Bewegung nicht aktiviert")
            deactivate_voltage()
            return
        activate_daylight()
        if not light_turned_off():
            print("Licht nach Tageslichtaktivierung nicht deaktiviert")
            deactivate_daylight()
            deactivate_voltage()
            return
        deactivate_daylight()
        turn_servo()
        deactivate_voltage()
        if not light_turned_off():
            print("Licht nach Entfernen der Spannung nicht deaktiviert!")
            return
        motion_sensor = "o.k."
        print("Bewegungsmelder-Prüfung erfolgreich")

    def check_light():
        global motion_sensor
        motion_sensor = "No motion sensor built in."
        activate_voltage()
        if light_turned_off():
            print("Licht nicht aktiviert")
            deactivate_voltage()
            return
        for _i in range(3):
            capture_light_values()
            if intensity > 0 and temperature > 0:
                break
        if intensity == 0 or temperature == 0:
            print("Fehler bei der Lichtmessung")
            deactivate_voltage()
            return
        deactivate_voltage()
        if not light_turned_off():
            print("Licht nach Entfernen der Spannung nicht deaktiviert!")
            return
        print("Licht-Prüfung erfolgreich")
        
    def start_check():
        with open(filepath_light_settings) as file:  # noqa: PTH123
            data = json.load(file)
            # check if "Bewegungsmelder" at article number is "Ja"
            if data[article_number]["Bewegungsmelder"] == "Ja":
                pruefung.label_text1.setText("Bewegungsmelder-Prüfung...")
                pruefung.progressBar.setProperty("value", 10)
                check_motion_sensor()
            elif data[article_number]["Bewegungsmelder"] == "Nein":
                pruefung.label_text1.setText("Licht-Prüfung...")
                pruefung.progressBar.setProperty("value", 10)
                check_light()
            else:
                print(f"Fehler bei der Bewegungsmelder-Konfiguration der Lampe {data[article_number]['Name']}")
                
    def confirm_pruefung():
        global number
        protocol.save_test_data(user_id, business_order, article_number, number, quantity, intensity, temperature, motion_sensor)
        #label.create_label(business_order, article_number, number, quantity, user_id)
        while number <= int(quantity):
            number += 1
            pruefung.label_text2.setText(f"Prüfung {number} von {quantity}")
            main_window.setCurrentWidget(open_cover)
            QCoreApplication.processEvents()
            start_open_cover()
            start_close_cover()
            return

        main_window.setCurrentWidget(business_order_selection)

    # function for logout buttons
    def logout():
        main_window.setCurrentWidget(user_login)
        user_login.lineEdit_userInput.setFocus()

    # function for app exit
    def exit_app():
        global close_to_exit
        close_to_exit = True
        main_window.setCurrentWidget(close_cover)
        
    # button signals
    
    open_cover.pushButton_cancel.clicked.connect(cancel_open_cover)
    user_login.pushButton_confirm.clicked.connect(confirm_user_login)
    user_login.pushButton_exit.clicked.connect(exit_app)
    business_order_selection.pushButton_confirm.clicked.connect(confirm_business_order_selection)
    business_order_selection.pushButton_logout.clicked.connect(logout)
    article_selection.pushButton_confirm.clicked.connect(confirm_article_selection)
    article_selection.pushButton_logout.clicked.connect(logout)
    tool_change.pushButton_confirm.clicked.connect(confirm_tool_change)
    quantity_selection.pushButton_logout.clicked.connect(logout)
    quantity_selection.pushButton_confirm.clicked.connect(confirm_quantity_selection)
    close_cover.pushButton_confirm.toggled.connect(start_close_cover)
    pruefung.pushButton_confirm.clicked.connect(confirm_pruefung)

    # load settings
    value = settings.value("filepath")
    if value is not None:
        user_login.label_filepath.setText(str(value))
        font = QFont()
        font.setPointSize(set_max_font_size_label_filepath(user_login.label_filepath))
        user_login.label_filepath.setFont(font)
    else:
        user_login.choose_filepath()

    # show main window
    initial_gpio_setup()
    main_window.show()
    start_open_cover()
    
    # execute app
    app.exec()

if __name__ == "__main__":
    main()
