import time

from settings import ENV, LIGHT_SETTINGS_CONFIG_PATH, INVERT_GPIO

if ENV == 'PROD':
    import RPi.GPIO as GPIO
else:
    from GPIOEmulator.EmulatorGUI import GPIO


PIN_MOVE_DOWN = 2
PIN_MOVE_UP = 3


PIN_LIGHT_RED = 5
PIN_LIGHT_GREEN = 9
PIN_LIGHT_YELLOW = 11

PIN_TESTLIGHT = 8


PIN_SERVO = 12

PIN_EMERGENCY_POWER_SOURCE = 24
PIN_POWER_MAIN = 25
PIN_EMERGENCY_POWER = 26


def init():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(16, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Sicherheitsschaltgerät 0=sicher
    GPIO.setup(17, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Zuhaltung 0=offen
    #pull down logic
    GPIO.setup(PIN_MOVE_DOWN, GPIO.OUT)     #abfahren
    GPIO.setup(PIN_MOVE_UP, GPIO.OUT)     #auffahren
    GPIO.setup(5, GPIO.OUT)     #rot
    GPIO.setup(7, GPIO.OUT)     #gesch. extern
    GPIO.setup(PIN_TESTLIGHT, GPIO.OUT)     #Licht
    GPIO.setup(9, GPIO.OUT)     #grün
    GPIO.setup(10, GPIO.OUT)    #Zuhaltung
    GPIO.setup(11, GPIO.OUT)    #gelb
    #GPIO.setup(12, GPIO.OUT)    #Servo
    #pull up logic
    GPIO.setup(6, GPIO.OUT)     #DALI
    GPIO.setup(PIN_EMERGENCY_POWER_SOURCE, GPIO.OUT)    #Notstromquelle
    GPIO.setup(PIN_POWER_MAIN, GPIO.OUT)    #Hauptstrom an
    GPIO.setup(PIN_EMERGENCY_POWER, GPIO.OUT)    #Notstrom an

    set_initial_gpio_state()


def invert(pin_value):
    # Invert for GPIO emulator
    if INVERT_GPIO:
        return not pin_value
    else:
        return pin_value


def set_initial_gpio_state():
    GPIO.output(2, invert(GPIO.HIGH))
    GPIO.output(3, invert(GPIO.HIGH))
    GPIO.output(5, invert(GPIO.HIGH))
    GPIO.output(7, invert(GPIO.HIGH))
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.HIGH))
    GPIO.output(9, invert(GPIO.HIGH))
    GPIO.output(10, invert(GPIO.HIGH))
    GPIO.output(11, invert(GPIO.HIGH))
    GPIO.output(PIN_EMERGENCY_POWER_SOURCE, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.LOW)
    GPIO.output(6, GPIO.LOW)
    #servo auf 0°


def activate_daylight():
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.LOW))


def deactivate_daylight():
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.HIGH))


def turn_motion_sensor_servo():
    servo = GPIO.PWM(PIN_SERVO, 50)
    servo.start(97.5)

    def servo_winkel(servo, winkel):
        servo.ChangeDutyCycle(((winkel-0)/(180-0))*(97.5-89)+89)

    servo_winkel(servo, 180)
    time.sleep(1)
    servo_winkel(servo, 0)
    time.sleep(1)

    GPIO.cleanup(servo)


def deactivate_voltage():
    GPIO.output(PIN_EMERGENCY_POWER_SOURCE, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.LOW)


def start_open_cover():
    GPIO.output(10, invert(GPIO.LOW))   # Zuhaltung öffnen
    GPIO.output(8, invert(GPIO.LOW))    # Licht an
    GPIO.output(11, invert(GPIO.LOW))   # orange an
    GPIO.output(9, invert(GPIO.HIGH))   # grün aus
    GPIO.output(5, invert(GPIO.HIGH))   # rot aus

def open_cover_1():
    GPIO.output(3, invert(GPIO.LOW))
    GPIO.output(2, invert(GPIO.HIGH))

def open_cover_2():
    GPIO.output(2, invert(GPIO.HIGH))
    GPIO.output(3, invert(GPIO.HIGH))

def cleanup():
    GPIO.cleanup()

