import time

from settings import PI

if PI:
    import RPi.GPIO as GPIO
else:
    from GPIOEmulator.EmulatorGUI import GPIO


PIN_MOVE_DOWN = 2
PIN_MOVE_UP = 3

PIN_LIGHT_RED = 5
PIN_LIGHT_GREEN = 9
PIN_LIGHT_YELLOW = 11

PIN_LOCK = 10

PIN_DALI = 6
PIN_EXTERNAL_SWITCH = 7

PIN_TESTLIGHT = 8

PIN_SERVO = 12

PIN_SAFETY_RELAY_FEEDBACK = 16
PIN_LOCK_FEEDBACK = 17

PIN_EMERGENCY_POWER_SWITCH = 24
PIN_POWER_MAIN = 25
PIN_EMERGENCY_POWER = 26


def init():
    GPIO.setmode(GPIO.BCM)
    GPIO.setwarnings(False)
    GPIO.setup(PIN_SAFETY_RELAY_FEEDBACK, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Sicherheitsschaltgerät 0=sicher
    GPIO.setup(PIN_LOCK_FEEDBACK, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)     #Zuhaltung 0=offen
    #pull down logic
    GPIO.setup(PIN_MOVE_DOWN, GPIO.OUT)     #abfahren
    GPIO.setup(PIN_MOVE_UP, GPIO.OUT)     #auffahren
    GPIO.setup(PIN_LIGHT_RED, GPIO.OUT)     #rot
    GPIO.setup(PIN_EXTERNAL_SWITCH, GPIO.OUT)     #gesch. extern
    GPIO.setup(PIN_TESTLIGHT, GPIO.OUT)     #Licht
    GPIO.setup(PIN_LIGHT_GREEN, GPIO.OUT)     #grün
    GPIO.setup(PIN_LOCK, GPIO.OUT)    #Zuhaltung
    GPIO.setup(PIN_LIGHT_YELLOW, GPIO.OUT)    #gelb
    #pull up logic
    GPIO.setup(PIN_DALI, GPIO.OUT)     #DALI
    GPIO.setup(PIN_EMERGENCY_POWER_SWITCH, GPIO.OUT)    #Notstromquelle
    GPIO.setup(PIN_POWER_MAIN, GPIO.OUT)    #Hauptstrom an
    GPIO.setup(PIN_EMERGENCY_POWER, GPIO.OUT)    #Notstrom an

    set_initial_gpio_state()


def invert(pin_value):
    # Invert for GPIO emulator
    if PI:
        return pin_value
    else:
        return not pin_value


def set_initial_gpio_state():
    GPIO.output(PIN_MOVE_DOWN, invert(GPIO.HIGH))
    GPIO.output(PIN_MOVE_UP, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_RED, invert(GPIO.HIGH))
    GPIO.output(PIN_EXTERNAL_SWITCH, invert(GPIO.HIGH))
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_GREEN, invert(GPIO.HIGH))
    GPIO.output(PIN_LOCK, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_YELLOW, invert(GPIO.HIGH))
    GPIO.output(PIN_EMERGENCY_POWER_SWITCH, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.LOW)
    GPIO.output(PIN_DALI, GPIO.LOW)
    turn_motion_sensor_servo()


def activate_daylight():
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.LOW))


def deactivate_daylight():
    GPIO.output(PIN_TESTLIGHT, invert(GPIO.HIGH))

def unsafe_safety_relay():
    return bool(GPIO.input(PIN_SAFETY_RELAY_FEEDBACK) == GPIO.HIGH)

def unsafe_lock():
    return bool(GPIO.input(PIN_LOCK_FEEDBACK) == GPIO.LOW)

def safety_check():
    if PI:
        return bool(GPIO.input(PIN_SAFETY_RELAY_FEEDBACK) == GPIO.LOW and GPIO.input(PIN_LOCK_FEEDBACK) == GPIO.HIGH)
    else:
        return bool(GPIO.input(PIN_SAFETY_RELAY_FEEDBACK) == GPIO.LOW)

def turn_motion_sensor_servo():
    if PI:
        servo = GPIO.PWM(PIN_SERVO, 50)
        servo.start(97.5)

        def servo_winkel(servo, winkel):
            servo.ChangeDutyCycle(((winkel-0)/(180-0))*(97.5-89)+89)

        servo_winkel(servo, 180)
        time.sleep(1)
        servo_winkel(servo, 0)
        time.sleep(1)

        GPIO.cleanup(servo)

def activate_main_voltage():
    GPIO.output(PIN_EMERGENCY_POWER_SWITCH, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.HIGH)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.LOW)

def activate_emergency_voltage_ac():
    GPIO.output(PIN_EMERGENCY_POWER_SWITCH, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.HIGH)

def activate_emergency_voltage_dc():
    GPIO.output(PIN_EMERGENCY_POWER_SWITCH, GPIO.HIGH)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.HIGH)

def deactivate_voltage():
    GPIO.output(PIN_EMERGENCY_POWER_SWITCH, GPIO.LOW)
    GPIO.output(PIN_POWER_MAIN, GPIO.LOW)
    GPIO.output(PIN_EMERGENCY_POWER, GPIO.LOW)
    GPIO.output(PIN_DALI, GPIO.LOW)
    GPIO.output(PIN_EXTERNAL_SWITCH, invert(GPIO.HIGH))

def open_lock():
    GPIO.output(PIN_LOCK, invert(GPIO.LOW))

def close_lock():
    GPIO.output(PIN_LOCK, invert(GPIO.HIGH))

def open_cover():
    GPIO.output(PIN_MOVE_UP, invert(GPIO.LOW))
    GPIO.output(PIN_MOVE_DOWN, invert(GPIO.HIGH))

def cover_stop():
    GPIO.output(PIN_MOVE_DOWN, invert(GPIO.HIGH))
    GPIO.output(PIN_MOVE_UP, invert(GPIO.HIGH))

def close_cover():
    GPIO.output(PIN_MOVE_DOWN, invert(GPIO.LOW))
    GPIO.output(PIN_MOVE_UP, invert(GPIO.HIGH))

def green_light_on():
    GPIO.output(PIN_LIGHT_GREEN, invert(GPIO.LOW))
    GPIO.output(PIN_LIGHT_RED, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_YELLOW, invert(GPIO.HIGH))

def yellow_light_on():
    GPIO.output(PIN_LIGHT_YELLOW, invert(GPIO.LOW))
    GPIO.output(PIN_LIGHT_RED, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_GREEN, invert(GPIO.HIGH))

def red_light_on():
    GPIO.output(PIN_LIGHT_RED, invert(GPIO.LOW))
    GPIO.output(PIN_LIGHT_YELLOW, invert(GPIO.HIGH))
    GPIO.output(PIN_LIGHT_GREEN, invert(GPIO.HIGH))

def cleanup():
    GPIO.cleanup()

